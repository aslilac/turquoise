use std::fs;

// use std::{fs, io, process};

// fn build() -> io::Result<()> {
//     fs::create_dir_all("./.lun/src/").expect("Could not create build directory");
//     fs::write(
//         "./.lun/Cargo.toml",
//         r#"# Generated by lunc v0.0.0
// [package]
// name = "hello"
// version = "0.0.1"
// authors = ["McKayla Washburn <mckayla@hey.com>"]
// edition = "2021"
// description = "Hello sailor!"

// [workspace]
// "#,
//     )
//     .expect("Could not write program manifest");

//     fs::write(
//         "./.lun/src/main.rs",
//         r#"// Generated by lunc v0.0.0
// fn main() {
//     println!("Hello!");
// }
// "#,
//     )
// }

// fn run() -> io::Result<process::ExitStatus> {
//     process::Command::new("cargo")
//         .arg("run")
//         .current_dir("./.lun/")
//         .status()
// }

// fn main() -> Result<(), ()> {
//     build().expect("Could not write program contents");
//     run().expect("Failed to build and run binary");
//     Ok(())
// }

pub mod ast;
pub mod parser;

fn main() {
    let args = std::env::args().collect::<Vec<_>>();
    if args.len() != 2 {
        println!("Usage: tqc <file>");
        return;
    }

    let file = String::from(&args[1]);
    let content = fs::read(file).expect("Could not read file");
    let content = String::from_utf8(content).expect("Could not parse file as UTF-8");
    println!("{}", content);
}
